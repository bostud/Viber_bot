from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hcode, hbold
from numpy.core.defchararray import isdigit

from meest_api.create_parcel import create_parcel
from meest_api.location import poshtomat_num_to_id, branch_search, search_post_location
from keyboards.inline import cod_kb
from keyboards.inline.calback_datas import box_sizes
from keyboards.inline.create import create_parcel_kb
from loader import dp, bot, db
from aiogram import types
from states import ParcelCreate, SearchByAddress
import re


# @dp.message_handler(lambda query: query == "parcel_cre", state="*")
# async def start_dialog(message: types.Message):
#     await message.answer(hcode(
#         """–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∫–∏ –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –≤–∞–Ω—Ç–∞–∂—É, –ø–æ—à—Ç–æ–º–∞—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ—à—Ç–æ–º–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è,—ñ–º'—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ —ñ —Ç–µ–ª–µ—Ñ–æ–Ω."""))
#     size = open('data/img/sizes.png', 'rb')
#     await bot.send_photo(message.from_user.id, size, reply_markup=create_parcel_kb)


#
@dp.callback_query_handler(lambda query: query.data == "parcel_cre", state="*")
async def creat_parcel(call: CallbackQuery, state: FSMContext):
    size = open('data/img/sizes.png', 'rb')
    await call.message.edit_text(hcode(
        "–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∫–∏ –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –≤–∞–Ω—Ç–∞–∂—É, –ø–æ—à—Ç–æ–º–∞—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ—à—Ç–æ–º–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è,—ñ–º'—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ —ñ —Ç–µ–ª–µ—Ñ–æ–Ω."),
        parse_mode=types.ParseMode.HTML)
    await bot.send_photo(call.from_user.id, size, reply_markup=create_parcel_kb)
    await state.finish()


# –•–µ–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é "–ù–æ–≤–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"
@dp.message_handler(text='–ù–æ–≤–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è')
async def start_dialog(message: types.Message):
    await message.answer(hcode(
        """–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∫–∏ –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –≤–∞–Ω—Ç–∞–∂—É, –ø–æ—à—Ç–æ–º–∞—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ—à—Ç–æ–º–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è,—ñ–º'—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ —ñ —Ç–µ–ª–µ—Ñ–æ–Ω."""))
    size = open('data/img/sizes.png', 'rb')
    await bot.send_photo(message.from_user.id, size, reply_markup=create_parcel_kb)


# -------------------------------------------------------------------------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è callback_query_data c —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –ø–æ—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ—á—Ç–æ–º–∞—Ç–æ–≤
# –®–∏—Ä–∏–Ω–∞(width)*–í—ã—Å–æ—Ç–∞(height)*–ì–ª—É–±–∏–Ω–∞(length)
# –ú–∞–ª–∞—è —è—á. 370*115*590–º–º.
# –°—Ä–µ–¥. —è—á. 370*180*590–º–º.
# –ë–æ–ª—å—à. —è—á. 370*365*590–º–º.
#  "gabaritesMax": {
#           "length": 61,
#           "width": 37,
#           "height": 35
#         },

# –•–µ–Ω–¥–ª–µ—Ä –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å—ã–ª–∫–∏
@dp.callback_query_handler(box_sizes.filter(weight="0.589", volume="0.002"))
async def small_parcel(call: CallbackQuery, callback_data: dict, state: FSMContext):
    parcel_data = {
        'weight': float(callback_data['weight']),
        'volume': float(callback_data['volume'])}
    print(parcel_data)
    await call.message.delete()
    await state.update_data(parcel_size=parcel_data)
    await bot.answer_callback_query(callback_query_id=call.id)
    await call.answer(cache_time=60)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
    await call.message.answer(hbold("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –í–∞—à–æ–≥–æ –ø–æ—à—Ç–æ–º–∞—Ç—É"), reply_markup=keyboard)
    await ParcelCreate.get_sender_br_num.set()


@dp.callback_query_handler(box_sizes.filter(weight="0.589", volume="0.003"))
async def small_parcel(call: CallbackQuery, callback_data: dict, state: FSMContext):
    parcel_data = {
        'weight': float(callback_data['weight']),
        'volume': float(callback_data['volume'])}
    print(parcel_data)
    await call.message.delete()
    await state.update_data(parcel_size=parcel_data)
    await bot.answer_callback_query(callback_query_id=call.id)
    await call.answer(cache_time=60)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
    await call.message.answer(hbold("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –í–∞—à–æ–≥–æ –ø–æ—à—Ç–æ–º–∞—Ç—É"), reply_markup=keyboard)
    await ParcelCreate.get_sender_br_num.set()


# –•–µ–Ω–¥–ª–µ—Ä —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å—ã–ª–∫–∏
@dp.callback_query_handler(box_sizes.filter(weight="0.589", volume="0.037"))
async def medium_parcel(call: CallbackQuery, callback_data: dict, state: FSMContext):
    parcel_data = {
        'weight': float(callback_data['weight']),
        'volume': float(callback_data['volume'])}
    print(parcel_data)
    await call.message.delete()
    await state.update_data(parcel_size=parcel_data)
    await bot.answer_callback_query(callback_query_id=call.id)
    await call.answer(cache_time=60)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
    await call.message.answer(hbold("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –í–∞—à–æ–≥–æ –ø–æ—à—Ç–æ–º–∞—Ç—É"), reply_markup=keyboard)
    await ParcelCreate.get_sender_br_num.set()


# –•–µ–Ω–¥–ª–µ—Ä –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å—ã–ª–∫–∏
@dp.callback_query_handler(box_sizes.filter(weight="0.589", volume="0.074"))
async def big_parcel(call: CallbackQuery, callback_data: dict, state: FSMContext):
    parcel_data = {
        'weight': float(callback_data['weight']),
        'volume': float(callback_data['volume'])}
    await call.message.delete()
    await state.update_data(parcel_size=parcel_data)
    await bot.answer_callback_query(callback_query_id=call.id)
    await call.answer(cache_time=60)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
    await call.message.answer(hbold("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –í–∞—à–æ–≥–æ –ø–æ—à—Ç–æ–º–∞—Ç—É"), reply_markup=keyboard)
    await ParcelCreate.get_sender_br_num.set()


# ---------------------------------------------------------------------

@dp.message_handler(regexp="^\d{4}$", state=ParcelCreate.get_sender_br_num)
async def sender(message: types.Message, state: FSMContext):
    chat_id = message.from_user.id
    sender_post_num = poshtomat_num_to_id(message.text)
    if sender_post_num is False:
        await bot.send_sticker(chat_id, r"CAACAgIAAxkBAAEBV_hfY3oxV-wJjpmg-gY-tQ8vKTEPHgACCwADnP4yMPctMM3hxWgtGwQ")
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –¥—ñ—é", callback_data="Cancel3"))
        await message.answer(text='–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é', reply_markup=keyboard)
        return await bot.send_message(chat_id, f"–ü–æ—à—Ç–æ–º–∞—Ç –ø—ñ–¥ –Ω–æ–º–µ—Ä–æ–º {message.text} –Ω–µ —ñ—Å–Ω—É—î\n"
                                               "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ üëá")
    await state.update_data(sender_poshtomat_num=message.text)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ü–æ—à—É–∫ –ø–æ—à—Ç–æ–º–∞—Ç—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞",
                                            callback_data="by_rec_address"))
    keyboard.add(types.InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                                            callback_data="Cancel3"))
    # await message.answer('–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –ø–æ—à—Ç–æ–º–∞—Ç–æ–º üëá', reply_markup=keyboard)
    result = "\n".join(branch_search(message.text))
    await message.answer(f"{result}", parse_mode=types.ParseMode.HTML,
                         disable_web_page_preview=True)
    await state.update_data(sender_post_id=sender_post_num)
    await message.answer(hbold("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ—à—Ç–æ–º–∞—Ç—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞,\n—á–∏ –ø—Ä–æ–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫ –ø–æ—à—Ç–æ–º–∞—Ç—É"),
                         reply_markup=keyboard)
    await ParcelCreate.get_res_br_num.set()


@dp.callback_query_handler(lambda query: query.data == "by_rec_address", state="*")
async def search_by_address(call: CallbackQuery):
    await call.message.delete()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.insert(types.InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data='Cancel3'))
    await call.message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ: <b>–ú—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è</b> üëá", reply_markup=keyboard,
                              parse_mode=types.ParseMode.HTML)
    await SearchByAddress.SE1.set()


# @dp.callback_query_handler(lambda query: query.data == "back_to_enter_num", state=SearchByAddress)
# async def search_by_address(call: CallbackQuery):
#     await call.message.delete()
#     keyboard = types.InlineKeyboardMarkup(row_width=2)
#     # keyboard.insert(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back_to_enter_num'))
#     await call.message.answer(text="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ—à—Ç–æ–º–∞—Ç—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ üëá", reply_markup=keyboard,
#                               parse_mode=types.ParseMode.HTML)
#     await SearchByAddress.SE1.set()


# –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
@dp.message_handler(state=SearchByAddress.SE1)
async def search_by_address(message: types.Message, state: FSMContext):
    await message.delete()
    address = message.text
    await state.update_data(address=address)
    result = "\n".join(search_post_location(address))
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.insert(types.InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–æ—à—É–∫", callback_data='by_rec_address'))
    keyboard.insert(types.InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data='Cancel3'))
    await message.answer(f'{result}', reply_markup=keyboard)
    await message.answer(hbold("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ—à—Ç–æ–º–∞—Ç—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞"))
    await ParcelCreate.get_res_br_num.set()


# @dp.callback_query_handler(lambda query: re.match(r"by_address", query.data), state=ParcelCreate.get_res_br_num)
# async def search_by_address(call: CallbackQuery):
#     await call.message.delete()
#     keyboard = types.InlineKeyboardMarkup(row_width=2)
#     keyboard.insert(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data='go_back'))
#     await call.message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ: <b>–ú—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è</b> üëá", reply_markup=keyboard,
#                               parse_mode=types.ParseMode.HTML)
#     await Menu.Search_br_by_address.set()
#
#
# # –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
# @dp.message_handler(state=Menu.Search_br_by_address)
# async def search_by_address(message: types.Message, state: FSMContext):
#     address = message.text
#     await state.update_data(address=address)
#     result = "\n".join(search_post_location(address))
#     await message.answer(f'{result}')
#     await message.answer(text="–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é, –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ\n –ø–æ—à—É–∫"
#                               "–Ω–∞–π–±–ª–∏–∂—á–∏—Ö –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó –∞–¥—Ä–µ—Å–∏",
#                          reply_markup=branch_search_kb)
#     await state.finish()

@dp.message_handler(regexp="^\d{4}$", state=ParcelCreate.get_res_br_num)
async def show_menu_parcel_size(message: types.Message, state: FSMContext):
    await state.update_data(res_poshtomat_num=message.text)
    chat_id = message.from_user.id
    res_post_num = poshtomat_num_to_id(message.text)
    if res_post_num is False:
        await bot.send_sticker(chat_id, r"CAACAgIAAxkBAAEBV_hfY3oxV-wJjpmg-gY-tQ8vKTEPHgACCwADnP4yMPctMM3hxWgtGwQ")
        return await bot.send_message(chat_id, f"–ü–æ—à—Ç–æ–º–∞—Ç –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –ø—ñ–¥ –Ω–æ–º–µ—Ä–æ–º {message.text} –Ω–µ —ñ—Å–Ω—É—î\n"
                                               "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ üëá, –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –ø–æ—à—É–∫–æ–º –ø–æ—à—Ç–æ–º–∞—Ç—ñ–≤")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                                            callback_data="Cancel3"))  # –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –Ω–∞–¥–ø–∏—Å—å—é "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –ø–æ—à—Ç–æ–º–∞—Ç–æ–º"
    result = "\n".join(branch_search(message.text))
    await message.answer(f"{result}", parse_mode=types.ParseMode.HTML,
                         disable_web_page_preview=True)
    await state.update_data(re_post_num=res_post_num)
    await message.answer(hbold("–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ "), reply_markup=keyboard)
    await ParcelCreate.get_res_fio.set()


@dp.message_handler(state=ParcelCreate.get_res_fio)
async def show_menu_parcel_size(message: types.Message, state: FSMContext):
    chat_id = message.from_user.id
    res_full_name = message.text
    # print(len(res_full_name))
    # if not re.match(r"([–ê-–Ø–Å][–∞-—è—ë]+[\-\s]?){3,}", res_full_name):
    #     await bot.send_sticker(chat_id, r"CAACAgIAAxkBAAEBV_hfY3oxV-wJjpmg-gY-tQ8vKTEPHgACCwADnP4yMPctMM3hxWgtGwQ")
    #     return await bot.send_message(chat_id,
    #                                   f"–£ –ü–Ü–ë –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å, –∞–±–æ –º–∞—Ç–∏ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É\n"
    #                                   "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ üëá")
    await state.update_data(res_full_name=res_full_name)
    await message.answer(hbold("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ:") + hcode("0501111111"),
                         parse_mode=types.ParseMode.HTML)
    # await state.update_data(message_id1=mess_to_del['message_id'])
    # print(mess_to_del)
    await ParcelCreate.get_res_phone.set()


@dp.message_handler(state=ParcelCreate.get_res_phone)
async def show_menu_parcel_size(message: types.Message, state: FSMContext):
    chat_id = message.from_user.id
    res_phone = message.text
    if res_phone == '0501111111':
        return await message.answer(hbold("–í–∏ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–∑ –ø—Ä–∏–∫–ª–∞–¥—É\n"
                                          "–±—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞üëá"))
    if not re.match(r'^[0]{1}[0-9]{9}$', res_phone):
        await bot.send_sticker(chat_id, r"CAACAgIAAxkBAAEBV_hfY3oxV-wJjpmg-gY-tQ8vKTEPHgACCwADnP4yMPctMM3hxWgtGwQ")
        return await bot.send_message(chat_id, hbold("–í–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ") + hcode(res_phone) + hbold(
            "–Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ–æ—Ä–º–∞—Ç—É\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑"), parse_mode=types.ParseMode.HTML)
    res_phone = "38" + res_phone
    print(res_phone)
    await state.update_data(res_phone=res_phone)
    # data = await state.get_data()
    # message_id = data['message_id1']
    # print(data)
    # await bot.delete_message(chat_id,message_id)
    await message.answer(hbold("–ß–∏ –±–∞–∂–∞—î—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ —Å—É–º—É –ø—ñ—Å–ª—è–ø–ª–∞—Ç–∏?"), reply_markup=cod_kb,
                         parse_mode=types.ParseMode.HTML)
    await ParcelCreate.get_res_cod.set()


# @dp.callback_query_handler(state=ParcelCreate.get_res_cod)
# async def cod_pay_question(call: CallbackQuery, state: FSMContext):
#     await call.message.delete()
#     cod = types.InlineKeyboardMarkup(row_width=2)
#     cod.add(types.InlineKeyboardButton("–¢–∞–∫", callback_data="True"))
#     cod.add(types.InlineKeyboardButton("–ù—ñ", callback_data="False"))
#     cod.add(types.InlineKeyboardButton("–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
#     await call.message.answer("–ß–∏ –±–∞–∂–∞—î—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ —Å—É–º—É –ø—ñ—Å–ª—è–ø–ª–∞—Ç–∏?", reply_markup=cod,
#                               parse_mode=types.ParseMode.HTML)
#     await ParcelCreate.get_res_cod_sum.set()


@dp.callback_query_handler(lambda query: re.match(r"cod_true|cod_false", query.data),
                           state=ParcelCreate.get_res_cod)  # –ö—Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç
async def cod_pay(call: CallbackQuery, state: FSMContext):
    print("–ø–æ–ø–∞–ª –∫—É–¥–∞ –Ω—É–∂–Ω–æ")
    if 'cod_true' in call.data:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –¥—ñ—é", callback_data="Cancel3"))
        await call.message.edit_text(hbold("–í–≤–µ–¥—ñ—Ç—å —Å—É–º–º—É –ø—ñ—Å–ª—è–ø–ª–∞—Ç–∏ —É –≥—Ä–Ω.\n"
                                           "–ü—Ä–∏–∫–ª–∞–¥: 1000"), reply_markup=keyboard)
        await ParcelCreate.get_res_cod_sum.set()
    if 'cod_false' in call.data:
        print("Cod –Ω–µ—Ç")
        # await state.update_data(if_cod=call.data)
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("–Ø", callback_data="False"))
        keyboard.add(types.InlineKeyboardButton("–û—Ç—Ä–∏–º—É–≤–∞—á", callback_data="True"))
        keyboard.add(types.InlineKeyboardButton("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –¥—ñ—é", callback_data="Cancel3"))
        await call.message.edit_text(hbold("–•—Ç–æ –æ–ø–ª–∞—á—É—î –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è?"), reply_markup=keyboard)
        await ParcelCreate.get_res_pay.set()


@dp.message_handler(state=ParcelCreate.get_res_cod_sum)
async def cod_amount(message: types.Message, state: FSMContext):
    print(message.text)
    amount_cod = message.text
    if re.match(r'^([1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1][0]{4})$', amount_cod):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
        await message.answer(hbold("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è–ø–ª–∞—Ç–∏"),
                             reply_markup=keyboard)
        await state.update_data(amount_cod=amount_cod)
        await ParcelCreate.get_res_card_num.set()
        print("–ø–æ–¥—Ö–æ–¥–∏—Ç")
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
        return await message.answer(
            "–°—É–º–∞ –ø—ñ—Å–ª—è–ø–ª–∞—Ç–∏ –Ω–µ –º–æ–∂–µ –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ 0 –∞–±–æ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 10000, —Ç–∞ –º–∞—Ç–∏ –ª—ñ—Ç–µ—Ä–∏ —É —Å–≤–æ—î–º—É —Å–∫–ª–∞–¥—ñ\n"
            "–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –≤–≤–æ–¥, –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=keyboard)


@dp.message_handler(state=ParcelCreate.get_res_card_num)
async def cod_amount(message: types.Message, state: FSMContext):
    print(message.text)
    card_number = message.text
    if re.match(r'^[0-9]{16}$', card_number):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
        await message.answer(
            hbold("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ü–º‚Äô—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–∞—Ä—Ç–∫–∏ –ª–∞—Ç–∏–Ω–∏—Ü–µ—é. –ü—Ä–∏–∫–ª–∞–¥ –≤–≤–æ–¥—É: IVAN SHEVCHENKO"),
            reply_markup=keyboard)
        await state.update_data(card_number=card_number)
        await ParcelCreate.get_res_card_name.set()
        print("–ø–æ–¥—Ö–æ–¥–∏—Ç")
    else:
        menu_kb = types.InlineKeyboardMarkup()
        menu_kb.row(types.InlineKeyboardButton("–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
        return await message.answer(
            "–ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∏ —Å–∫–ª–∞–¥—î—Ç—å—Å—è –∑ 16 —Ü–∏—Ñ—Ä, —Ç–∞ –Ω–µ –º–æ–∂–µ –º–∞—Ç–∏ –ª—ñ—Ç–µ—Ä–∏ —É —Å–≤–æ—î–º—É —Å–∫–ª–∞–¥—ñ\n"
            "–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –≤–≤–æ–¥, –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
            reply_markup=menu_kb)


@dp.message_handler(state=ParcelCreate.get_res_card_name)
async def cod_amount(message: types.Message, state: FSMContext):
    print(message.text)
    cardholder_name = message.text.upper()
    print(cardholder_name)
    await state.update_data(cardholder_name=cardholder_name)
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton("–Ø", callback_data="False"))
    keyboard.add(types.InlineKeyboardButton("–û—Ç—Ä–∏–º—É–≤–∞—á", callback_data="True"))
    keyboard.add(types.InlineKeyboardButton("–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
    await message.delete()
    await message.answer(hbold("–•—Ç–æ –æ–ø–ª–∞—á—É—î –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è?"), reply_markup=keyboard)
    await ParcelCreate.get_res_pay.set()


# if isdigit(amount_cod) is False:
#     print("–Ω–µ —á–∏—Å–ª–æ")
# else:
#     print(amount_cod)
#     print(type(amount_cod))
# # if isdigit(amount_cod) is False or amount_cod <= 0:
#     keyboard = types.InlineKeyboardMarkup()
#     keyboard.add(types.InlineKeyboardButton("–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
#     await message.answer(hbold("–£ –∑–Ω–∞—á–µ–Ω–Ω—ñ –ø—ñ—Å–ª—è–ø–ª–∞—Ç–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ª—ñ—Ç–µ—Ä, —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ –≤—ñ–¥ 1 –¥–æ 1000\n"
#                                   "–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –≤–∞—à—É —Å–ø—Ä–æ–±—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º"), reply_markup=keyboard, disable_notification=False)
#     await state.update_data(amount_cod=amount_cod)
#     return await ParcelCreate.get_res_cod_sum.set()

# print(a)
# print(amount_cod)
# if int(amount_cod) <= 0:
#     keyboard = types.InlineKeyboardMarkup()
#     keyboard.add(types.InlineKeyboardButton("–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
#     await message.edit_text(hbold("–£ –∑–Ω–∞—á–µ–Ω–Ω—ñ –ø—ñ—Å–ª—è–ø–ª–∞—Ç–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ª—ñ—Ç–µ—Ä, —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ –≤—ñ–¥ 1 –¥–æ 1000\n"
#                                   "–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –≤–∞—à—É —Å–ø—Ä–æ–±—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º"), reply_markup=keyboard)
#     await state.update_data(amount_cod=amount_cod)
#     return await ParcelCreate.get_res_cod_sum
# else:
#     print("–¥—Ä—É–≥–æ–µ")
#     return await ParcelCreate.get_res_cod_sum


@dp.callback_query_handler(lambda query: re.match(r"True|False", query.data),
                           state=ParcelCreate.get_res_pay)  # –ö—Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç
async def take_from_postomat(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    who_pay = call.data
    print("–ü–æ–ø–∞–ª –≤ —Ö–µ–Ω–¥–ª–µ—Ä –æ–ø–ª–∞—Ç—ã")
    print(who_pay)
    await call.message.delete_reply_markup()
    await state.update_data(who_pay=who_pay)
    data = await state.get_data()
    print(data)
    # {'parcel_size': {'weight': 0.589, 'volume': 0.002}, 'sender_poshtomat_num': '4966',
    #  'sender_post_id': 'bd5f4052-dceb-11e8-80d7-1c98ec135261', 'res_poshtomat_num': '4966',
    #  're_post_num': 'bd5f4052-dceb-11e8-80d7-1c98ec135261', 'res_full_name': '0507723091', 'res_phone': '380507723091',
    #  'amount_cod': '12', 'card_number': 'IVAB', 'who_pay': 'True'}
    user_data = await db.get_user_data(call.from_user.id)
    user_phone = user_data['phone_number']
    sender_name = user_data['full_name']
    sender_poshtomat_num = data['sender_poshtomat_num']
    res_poshtomat_num = data['res_poshtomat_num']
    res_full_name = data['res_full_name']
    res_phone = data['res_phone']
    if 'amount_cod' in data:
        cardholder_name = data['cardholder_name']
        cod = data['amount_cod']
        card_number = data['card_number']
        parcel_info = f'<b>–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ </b>: {hbold(sender_name)}\n' \
                      f'{hcode(user_phone)}\n' \
                      f'–î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ—Å–ª—è–ø–ª–∞—Ç–∏:  {hcode(cardholder_name)}\n' \
                      f'{hcode(card_number)}\n' \
                      f'–ü–æ—à—Ç–æ–º–∞—Ç ‚Ññ:  {hcode(sender_poshtomat_num)}\n' \
                      f'<b>–û—Ç—Ä–∏–º—É–≤–∞—á </b>: {hcode(res_full_name)}\n' \
                      f'<b>–ü—ñ—Å–ª—è–ø–ª–∞—Ç–∞ </b>: {hcode(cod)} –≥—Ä–Ω\n' \
                      f'{hcode(res_phone)}\n' \
                      f'–ü–æ—à—Ç–æ–º–∞—Ç ‚Ññ: {hcode(res_poshtomat_num)}\n'
        await call.message.edit_text(f"{parcel_info}")
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(types.InlineKeyboardButton(text="–°—Ç–≤–æ—Ä–∏—Ç–∏", callback_data="create_parcel"))
        keyboard.add(types.InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
        await call.message.answer(hbold('–Ø–∫—â–æ —É—Å—ñ –¥–∞–Ω—ñ –≤—ñ—Ä–Ω—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å —Å—Ç–≤–æ—Ä–∏—Ç–∏'), reply_markup=keyboard)
        await ParcelCreate.get_result.set()
    else:
        print(f"–¢–æ —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ{data}")
        parcel_info = f'<b>–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ </b>: {hbold(sender_name)}\n' \
                      f'{hcode(user_phone)}\n' \
                      f'–ü–æ—à—Ç–æ–º–∞—Ç ‚Ññ:  {hcode(sender_poshtomat_num)}\n' \
                      f'<b>–û—Ç—Ä–∏–º—É–≤–∞—á </b>: {hcode(res_full_name)}\n' \
                      f'{hcode(res_phone)}\n' \
                      f'–ü–æ—à—Ç–æ–º–∞—Ç ‚Ññ: {hcode(res_poshtomat_num)}\n'
        print(parcel_info)
        await call.message.edit_text(f"{parcel_info}")
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(types.InlineKeyboardButton(text="–°—Ç–≤–æ—Ä–∏—Ç–∏", callback_data="create_parcel"))
        keyboard.add(types.InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
        await call.message.answer(hbold('–Ø–∫—â–æ —É—Å—ñ –¥–∞–Ω—ñ –≤—ñ—Ä–Ω—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å —Å—Ç–≤–æ—Ä–∏—Ç–∏'), reply_markup=keyboard)
        await ParcelCreate.get_result.set()


@dp.callback_query_handler(lambda query: re.match(r"create_parcel", query.data), state=ParcelCreate.get_result)
async def get_result_create_parcel(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    print(data)
    # await call.message.delete()
    # await call.message.edit_text()
    await call.message.delete_reply_markup()
    # res_phone = message.text
    user_data = await db.get_user_data(call.from_user.id)

    who_pay = data['who_pay']
    user_phone = user_data['phone_number']
    sender_name = user_data['full_name']
    sender_post_id = data.get("sender_post_id")
    re_post_num = data.get("re_post_num")
    re_full_name = data.get("res_full_name")
    parcel_size = data.get('parcel_size')
    res_phone = data['res_phone']
    sender_poshtomat_num = data['sender_poshtomat_num']
    await db.add_parcels_created(call.from_user.id)
    await state.update_data(user_phone=user_phone)
    await state.update_data(poshtomat_num=sender_poshtomat_num)
    result = create_parcel(sender_name, user_phone, sender_post_id,  # –ö–∞–º–º–µ–Ω—Ç–∏–º –¥–ª—è —Ç–µ—Å—Ç–∞
                           re_full_name, res_phone, re_post_num, parcel_size, who_pay)
    await call.message.edit_text(result, parse_mode=types.ParseMode.HTML)
    # await state.finish()
    my_parcels = types.InlineKeyboardMarkup()
    my_parcels.row(types.InlineKeyboardButton(text="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—Ä–∞–∑",
                                              callback_data="send_parcel_yes"))
    my_parcels.row(types.InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                                              callback_data="Cancel3"))
    await call.message.answer(hbold("–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ—Å–∏–ª–∫—É –∑–∞—Ä–∞–∑,\n–∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?"),
                              reply_markup=my_parcels)
    await state.reset_state(with_data=False)

# @dp.callback_query_handler(lambda query: query.data == "send_parcel", state="*")
# async def send_parcel(call: CallbackQuery, state: FSMContext):
#     await call.message.delete()
#     keyboard = types.InlineKeyboardMarkup()
#     keyboard.add(types.InlineKeyboardButton(text=f"–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
#     await call.message.answer(hcode("–î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üëá"), reply_markup=keyboard)
#     await call.message.answer(
#         text=call.from_user.first_name + ", –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ—à—Ç–æ–º–∞—Ç—É –∑ —è–∫–æ–≥–æ\n–í–∏ –±–∞–∂–∞—î—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ—Å–∏–ª–∫—Éüëá")
#     await MenuPoshtomat.P1_1.set()
