from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hcode, hbold

from meest_api.get_payment_data import get_payment_data
from meest_api.location import poshtomat_info
from meest_api.pay import pay_by_portmone_my_parcels
from meest_api.poshtomatApi import parcels_list, parcel_debt, get_token_sender, verify_token, customer_insert, \
    customer_insert_conform, my_parcel_debt
from keyboards.default import menu_uk_kb_show
from keyboards.inline import branch_search_kb
from loader import dp
from states import ParcelInsert, NewParcel


@dp.callback_query_handler(lambda query: query.data == "search", state="*")
async def poshtomat_search(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('<b>–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—Å—ñ–± –ø–æ—à—É–∫—É –ø–æ—à—Ç–æ–º–∞—Ç—ñ–≤ Meest</b>',
                              reply_markup=branch_search_kb)
    await state.finish()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏ –≤ –ø–æ—á—Ç–æ–º–∞—Ç
@dp.callback_query_handler(lambda query: query.data == "send_parcel_yes", state="*")
async def choose_in(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    data = await state.get_data()
    # print(data)
    user_phone = data.get("user_phone")  # –±–µ—Ä–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    # user_phone = "380507723091"  # —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    poshtomat_num = data.get("poshtomat_num")
    # poshtomat_num = "6077"  # —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    poshtomat_id_ref = poshtomat_info(poshtomat_num)
    await state.update_data(poshtomatIDRef=poshtomat_id_ref)
    print(user_phone)
    print(poshtomat_num)  # –±–µ—Ä–µ–º –Ω–æ–º–µ—Ä –ø–æ—á—Ç–æ–º–∞—Ç–∞
    print("–≠—Ç–æ –•–µ–Ω–¥–ª–µ—Ä —Å–ª–æ–≤–∏–ª –Ω–∞–∂–∞—Ç–∞—Ç–∏–µ in")
    result = parcels_list(poshtomat_num, user_phone)
    if result is False:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.row(types.InlineKeyboardButton(text="–¢–∞–∫", callback_data="parcel_cre"))
        keyboard.row(types.InlineKeyboardButton(text="–ù—ñ", callback_data="Cancel3"))
        await call.message.edit_text(call.from_user.first_name + hbold(
            ", —É –í–∞—Å –Ω–µ –º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –ø–æ—Å–∏–ª–æ–∫ –¥–ª—è –≤–∫–ª–∞–¥–µ–Ω–Ω—è —É –ø–æ—à—Ç–æ–º–∞—Ç ‚Ññ:") + hcode(poshtomat_num) +
                                     hbold("\n–ë–∞–∂–∞—î—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏?"), reply_markup=keyboard)
        return await NewParcel.PL1.set()  # –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å–æ —Å—Ç–µ–π—Ç–æ–º
    else:
        await state.update_data(choose_in_result=result)
        await call.message.answer(hcode('–û–±–µ—Ä—ñ—Ç—å –í–∞—à–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤–∫–ª–∞–¥–µ–Ω–Ω—è —É –ø–æ—à—Ç–æ–º–∞—Ç'))
        for i in result:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", callback_data=i['id']))
            await call.message.answer(
                i['text'],
                parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
        main_menu = types.InlineKeyboardMarkup()
        main_menu.add(types.InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
        await call.message.answer("–î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=main_menu)
    await ParcelInsert.Insert1.set()


# –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏
@dp.callback_query_handler(state=ParcelInsert.Insert1)
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è id –ø–æ—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
# {'result_code': 200, 'result_info': 'ok', 'result': {'Error': '20', 'ErrorDetails': ' –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –∫–æ–º—ñ—Ä–æ–∫ —Ä–æ–∑–º—ñ—Ä—ÉL'}}
async def catch_callback_in(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    parcel_id = call.data
    print(parcel_id)
    # print(call.data)
    # print("–ü–æ–ø–∞–ª–æ –≤ —Ö–µ–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    await state.update_data(parcel_id_in=parcel_id)
    data = await state.get_data()
    r = list(filter(lambda x: x['id'] == parcel_id, data['choose_in_result']))
    if r:
        num = r[0]['num']
        await state.update_data(parcel_num=num)
        # await state.update_data(choose_in_result=None)
    else:
        print("–ù–ï –Ω–∞—à–µ–ª")
        return await state.finish()
    parcel_res = parcel_debt(parcel_id, call.from_user.first_name)
    # amount = parcel_res['result']['Total']
    if parcel_res is True:
        await call.message.answer(
            hbold("–í—Å–µ —Å–ø–ª–∞—á–µ–Ω–æ!"))
        token_sender = get_token_sender(parcel_id)
        print(token_sender)
        await state.update_data(token_sender=token_sender)
        await call.message.answer(
            hbold("–ù–∞ –í–∞—à –º–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –°MC –∑ –∫–æ–¥–æ–º –≤–∞—Ä—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"))
        return await ParcelInsert.Insert3.set()
    else:
        data = await state.get_data()
        parcel_num = data['parcel_num']
        amount = parcel_res['result']['Total']
        get_data = get_payment_data(parcel_num, amount)
        print(get_data)
        split_pay = get_data['split_pay']
        shipment_uid = get_data['shipment_uid']
        # pay_type = get_data['type']
        description = get_data['description']
        total_amount = my_parcel_debt(shipment_uid)
        total_to_pay = total_amount['Total']
        pay_link_in = pay_by_portmone_my_parcels(parcel_num, total_to_pay, split_pay, shipment_uid, description)
        print(pay_link_in)
        await state.update_data(pay_link_in=pay_link_in)  # –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ç—å
        pay_button = types.InlineKeyboardMarkup(row_width=2)
        pay_button.add(types.InlineKeyboardButton(text=f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–∏ {amount} –≥—Ä–Ω", callback_data="pay",
                                                  url=pay_link_in))
        pay_button.add(types.InlineKeyboardButton(text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é –æ–ø–ª–∞—Ç—É", callback_data="payment_confirm"))
        # pay_button.add(types.InlineKeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –¥—ñ—é", callback_data="Cancel3"))
        await call.message.edit_reply_markup(reply_markup=pay_button)
        await ParcelInsert.Insert2.set()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
@dp.callback_query_handler(lambda query: query.data == "payment_confirm", state=ParcelInsert.Insert2)
async def pay_checkout_query(call: CallbackQuery, state: FSMContext):
    # await call.answer(cache_time=30)
    data = await state.get_data()
    parcel_id = data['parcel_id_in']
    parcel_res = my_parcel_debt(parcel_id)
    res_amount = parcel_res['Total']
    print(parcel_res)
    # await call.message.answer(f"–†–ï–ó–£–õ–¨–¢–ê–¢{parcel_res}")
    pay_link = data['pay_link_in']  # —Ä–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ç—å
    if res_amount == 0:
        await call.message.delete()
        await call.answer(call.from_user.first_name + hcode(", –í–∞—à–∞ –ø–æ—Å–∏–ª–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞"), show_alert=True)
        token_sender = get_token_sender(parcel_id)
        await state.update_data(token_sender=token_sender)
        await call.message.answer(
            hbold("–ù–∞ –í–∞—à –º–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –°MC –∑ –∫–æ–¥–æ–º –≤–∞—Ä—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"),
            parse_mode=types.ParseMode.HTML)
        await ParcelInsert.Insert3.set()
    if res_amount != 0:
        pay_button = types.InlineKeyboardMarkup(row_width=2)
        pay_button.add(types.InlineKeyboardButton(text=f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–∏ {res_amount} –≥—Ä–Ω", callback_data="pay",
                                                  url=pay_link))
        pay_button.add(types.InlineKeyboardButton(text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é –æ–ø–ª–∞—Ç—É", callback_data="payment_confirm"))
        await call.answer(call.from_user.first_name + ", –í–∞—à–∞ –ø–æ—Å–∏–ª–∫–∞ —â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞", show_alert=True)
        # pay_button.add(types.InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="Cancel3"))
        return await call.message.edit_reply_markup(reply_markup=pay_button)


# –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
@dp.message_handler(state=ParcelInsert.Insert3)
async def to_sender(message: types.Message, state: FSMContext):
    data = await state.get_data()
    print(data)
    token_sender = data['token_sender']  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    password = message.text
    result = verify_token(token_sender, password)
    if result == 104:
        return await message.answer(hbold("–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –∑ –°–ú–°"))
    if result == 103:
        await message.delete()
        await message.answer(hbold("–í–∏ –≤–∏—á–µ—Ä–ø–∞–ª–∏ —É—Å—ñ —Å–ø—Ä–æ–±–∏, —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"),
                             reply_markup=menu_uk_kb_show)
        return await state.finish()
    if result is True:
        door_open = types.InlineKeyboardMarkup()
        door_open.add(types.InlineKeyboardButton(text="–í–∫–ª–∞—Å—Ç–∏", callback_data="insert"))
        door_open.add(types.InlineKeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –¥—ñ—é", callback_data="Cancel3"))
        await message.answer(hbold('–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–æ–º—ñ—Ä–∫—É –¥–ª—è –≤–∫–ª–∞–¥–µ–Ω–Ω—è —É –ø–æ—à—Ç–æ–º–∞—Ç'), reply_markup=door_open)
        # await state.reset_state(with_data=False)
        await ParcelInsert.Insert4.set()


# –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ  - –≤–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–æ—á—Ç–æ–º–∞—Ç
@dp.callback_query_handler(lambda query: query.data == "insert", state=ParcelInsert.Insert4)
async def insert_in_poshtomat(call: CallbackQuery, state: FSMContext):
    print("–•–ï–ù–î–õ–ï–† –°–õ–û–í–ò–õ insert")
    data = await state.get_data()
    print(data)
    token_sender = data['token_sender']
    poshtomat_id_ref = data['poshtomatIDRef']
    parcel_id_in = data['parcel_id_in']
    parcel_num = data['parcel_num']
    trans_id = customer_insert(token_sender, poshtomat_id_ref, parcel_id_in, parcel_num)  # –§—É–Ω–∫—Ü–∏—è –≤–ª–æ–∂–µ–Ω–∏—è –≤ –ø–æ—á—Ç–æ–º–∞—Ç
    print(trans_id)
    # await call.message.answer(trans_id)
    # a = "543aa7ede0243f3138096eb6e85bd4a1"
    if 'transID' not in trans_id:
        error = trans_id['ErrorDetails']
        await call.message.delete()
        await call.message.answer(text=error, reply_markup=menu_uk_kb_show)
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.insert(types.InlineKeyboardButton(text="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞", url='t.me/MeestSupport_bot'))
        await call.message.answer("–ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –∑–∞ –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–∞—à–æ—ó –ª—ñ–Ω—ñ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ—à—Ç–æ–º–∞—Ç—ñ–≤:\n"
                                  "+380673735753\n"
                                  "+380503735753\n"
                                  "–ê–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –Ω–∞—à–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ —É —á–∞—Ç—ñ üëá", parse_mode=types.ParseMode.HTML,
                                  reply_markup=keyboard)  # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        return await state.finish()
    else:
        trans_id = trans_id['transID']
        await state.update_data(trans_id=trans_id)
        # await call.message.answer(
        #     f"{call.from_user.first_name}, –∫–æ–º—ñ—Ä–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ üëâ –ø–æ–∫–ª–∞–¥—ñ—Ç—å –í–∞—à–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—Å–µ—Ä–µ–¥–∏–Ω—É")
        confirm_kb = types.InlineKeyboardMarkup()
        confirm_kb.add(types.InlineKeyboardButton(text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∫–ª–∞–¥–µ–Ω–Ω—è –≤ –ø–æ—à—Ç–æ–º–∞—Ç", callback_data="confirm"))
        await call.message.edit_text(
            call.from_user.first_name + ", –∫–æ–º—ñ—Ä–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ üëâ –ø–æ–∫–ª–∞–¥—ñ—Ç—å –í–∞—à–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—Å–µ—Ä–µ–¥–∏–Ω—É",
            reply_markup=confirm_kb)
        # await bot.answer_callback_query(callback_query_id=call.id)
        await call.answer(cache_time=60)
    await ParcelInsert.Insert5.set()


# –í–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
@dp.callback_query_handler(lambda query: query.data == "confirm", state=ParcelInsert.Insert5)
async def confirm_handler(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    data = await state.get_data()
    token_sender = data['token_sender']
    poshtomat_id_ref = data['poshtomatIDRef']
    parcel_id_in = data['parcel_id_in']
    parcel_num = data['parcel_num']
    trans_id = data['trans_id']
    result = customer_insert_conform(token_sender, poshtomat_id_ref, parcel_id_in,
                                     trans_id)  # –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è
    print(result)
    await call.message.answer(
        call.from_user.first_name + hbold(",–í–∞—à–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä: ") + hcode(parcel_num) + hbold(
            "–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ!\n–î—è–∫—É—î–º–æ –í–∞–º –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥–∞–º–∏ –∫–æ–º–ø–∞–Ω—ñ—ó Meest"), reply_markup=menu_uk_kb_show)
    print("–ü–û–°–´–õ–ö–ê –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–ê!!")
    await state.finish()
