import json

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold

from meest_api.geo_locations import search_br_location
from keyboards.default import menu_uk_kb_show
from keyboards.default.location_buttons import location_kb
from keyboards.inline import branch_search_kb
from loader import dp, db
from meest_api.location import branch_search, search_post_location
from states import Menu
from datetime import datetime


@dp.callback_query_handler(text="Cancel2", state="*")
async def cancel(call: CallbackQuery, state: FSMContext):
    await call.message.delete_reply_markup()
    # await call.message.edit_text(text="–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é üëá")
    await call.message.answer(hbold("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"), reply_markup=menu_uk_kb_show)
    await state.finish()


@dp.callback_query_handler(text="go_back", state="*")
async def cancel(call: CallbackQuery, state: FSMContext):
    # await call.message.delete_reply_markup(
    await call.message.delete()
    # await call.message.edit_text(text="–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é üëá")
    await call.message.answer(hbold("–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—Å—ñ–± –ø–æ—à—É–∫—É –ø–æ—à—Ç–æ–º–∞—Ç—ñ–≤ Meest"),
                              reply_markup=branch_search_kb)
    await state.finish()


@dp.message_handler(text="–ü–æ—à—É–∫ –ø–æ—à—Ç–æ–º–∞—Ç—ñ–≤")
async def show_tracking(message: types.Message):
    # user_id = message.from_user.id
    # print(user_id)
    # data = {
    #     "info": {
    #         "event_date": datetime.now(),
    #         "user_name": message.from_user.full_name,
    #         "poshtomat_num": "–ë–ª–∞–±–ª–∞–±–ª–∞",
    #         "status": "–ü–æ–ª—É—á–µ–Ω–æ",
    #         ""
    #     }
    # }
    # new = json.dumps(data)
    # print(type(data))
    # await db.add_data_info(user_id, new)
    await message.answer(hbold('–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—Å—ñ–± –ø–æ—à—É–∫—É –ø–æ—à—Ç–æ–º–∞—Ç—ñ–≤ Meest'),
                         reply_markup=branch_search_kb)


# –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –æ—Ç–¥–µ–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda query: query.data == "by_number")  # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
async def branch_search_number(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.insert(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='go_back'))
    await call.message.answer(hbold("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ—à—Ç–æ–º–∞—Ç—É"), reply_markup=keyboard)
    await Menu.Branch_search.set()


# –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –æ—Ç–¥–µ–ª–µ–Ω–∏—è
@dp.message_handler(state=Menu.Branch_search)  # –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É
async def search_by_number(message: types.Message, state: FSMContext):
    branch_num = message.text
    result = "\n".join(branch_search(branch_num))
    await message.answer(f"{result}")
    await message.answer(hbold("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é, –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–æ—à—É–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è"),
                         reply_markup=branch_search_kb)
    await state.finish()


# –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
@dp.callback_query_handler(lambda query: query.data == "by_address", state="*")
async def search_by_address(call: CallbackQuery):
    await call.message.delete()
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.insert(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data='go_back'))
    await call.message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ: <b>–ú—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è</b> üëá", reply_markup=keyboard,
                              parse_mode=types.ParseMode.HTML)
    await Menu.Search_br_by_address.set()


# –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
@dp.message_handler(state=Menu.Search_br_by_address)
async def search_by_address(message: types.Message, state: FSMContext):
    address = message.text
    await state.update_data(address=address)
    result = "\n".join(search_post_location(address))
    await message.answer(f'{result}')
    await message.answer(hbold("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é, –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ\n –ø–æ—à—É–∫"),
                         reply_markup=branch_search_kb)
    await state.finish()


@dp.callback_query_handler(lambda query: query.data == "by_shipment_num")
async def search_by_address(call: CallbackQuery):
    await call.message.delete()
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.insert(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='go_back'))
    await call.message.answer(hbold("–í–≤–µ–¥—ñ—å –Ω–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—è—è"), reply_markup=keyboard,
                              parse_mode=types.ParseMode.HTML)
    await Menu.Search_by_num.set()


# –ü–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞—Ü–∏–∏
@dp.callback_query_handler(lambda query: query.data == "by_location")
async def search_by_geo(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer(hbold("–î–ª—è –ø–æ—à—É–∫—É –Ω–∞–π–±–ª–∏–∂—á–∏—Ö –ø–æ—à—Ç–æ–º–∞—Ç—ñ–≤ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—î—é –ª–æ–∫–∞—Ü—ñ—î—é"),
                              parse_mode=types.ParseMode.HTML, reply_markup=location_kb)
    await Menu.Search_br_by_location.set()


# –ü–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞—Ü–∏–∏
@dp.message_handler(state=Menu.Search_br_by_location, content_types=types.ContentTypes.LOCATION)
async def search_by_geo_location(message: types.Message, state: FSMContext):
    location = message.location
    latitude = location.latitude
    longitude = location.longitude
    result = "\n".join(search_br_location(str(latitude), str(longitude)))
    await message.answer(f'{result}')
    await message.answer(text="<b>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é</b>", reply_markup=branch_search_kb)
    await state.finish()
